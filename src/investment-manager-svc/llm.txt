micro-service-description:
  |-> will get account_id from frontend
  |
  |-> calls portfolio-reader-svc using the account_id to get current portfolio and the last 30 portfolio transaction details
  |   |-> request: {
  |   |     accountid: accountid CHAR(10) PRIMARY KEY [same as from accounts-db]
  |   |   }
  |   |-> response: {
  |         portfolio: {
  |           accountid,
  |           tier1_allocation,
  |           tier2_allocation,
  |           tier3_allocation,
  |           tier1_value,
  |           tier2_value,
  |           tier3_value,
  |         },
  |         transactions: {
  |           [uuid, tier1_change, tier2_change, tier3_change, status]
  |         }
  |       }
  |    
  |-> if investment triggered calls invest-svc and reloads the page 
  |   |-> request: {
  |   |     accountid,
  |   |     amount
  |   |   }
  |   |-> response: {
  |   |     status
  |   |   }
  |   |-> if status is 'done': requests ledger-writer add a ledger accordingly
  |       |-> else: return error message to frontend
  |     
  |-> if withdrawal triggered calls withdraw-svc, and reloads the page
      |-> request: {
      |     accountid,
      |     amount
      |   }
      |-> response: {
      |     status
      |   }
      |-> if status is 'done': requests ledger-writer add a ledger accordingly
          |-> else: return error message to frontend

---created by Chinmay and Atharv for agent    
-----------
---created by agent for agent
# Investment Manager Service - LLM Documentation

## Overview
The `investment-manager-svc` is an orchestration service that manages user investment portfolios by integrating with multiple backend services. It acts as the central API layer for investment operations, handling portfolio data retrieval, investment processing, and withdrawal operations.

## Service Architecture
- **Port**: 8080
- **Language**: Python (Flask)
- **Dependencies**: portfolio-reader-svc, invest-svc, withdraw-svc, ledger-writer
- **Role**: Orchestration and API Gateway for investment operations

## API Endpoints

### Health and Status
- `GET /health` - Health check endpoint
- `GET /ready` - Readiness probe endpoint
- `GET /api/v1/status` - Service status and dependency health

### Portfolio Management
- `GET /api/v1/portfolio/{account_id}` - Get portfolio information
- `GET /api/v1/portfolio/{account_id}/transactions` - Get portfolio transactions

### Investment Operations
- `POST /api/v1/invest` - Process investment request
- `POST /api/v1/withdraw` - Process withdrawal request

## Data Flow

### 1. Portfolio Data Retrieval
```
Frontend → investment-manager-svc → portfolio-reader-svc
```

**Request:**
```json
GET /api/v1/portfolio/{account_id}
```

**Response:**
```json
{
  "portfolio": {
    "accountid": "1234567890",
    "tier1_allocation": 60.0,
    "tier2_allocation": 30.0,
    "tier3_allocation": 10.0,
    "tier1_value": 6000.00,
    "tier2_value": 3000.00,
    "tier3_value": 1000.00
  },
  "transactions": [
    {
      "uuid": "transaction-uuid-1",
      "tier1_change": 100.00,
      "tier2_change": 50.00,
      "tier3_change": 25.00,
      "status": "COMPLETED"
    }
  ]
}
```

### 2. Investment Processing
```
Frontend → investment-manager-svc → invest-svc → ledger-writer
```

**Request:**
```json
POST /api/v1/invest
{
  "accountid": "1234567890",
  "amount": 1000.00
}
```

**Ledger Transaction:**
```json
{
  "fromAccountNum": "1234567890",      // User's account
  "toAccountNum": "9999999999",        // Bank's investment account
  "fromRoutingNum": "123456789",
  "toRoutingNum": "123456789",
  "amount": 100000,                    // $1000.00 in cents
  "uuid": "unique-transaction-id"
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Investment processed and recorded successfully",
  "account_id": "1234567890",
  "amount": 1000.00,
  "ledger_recorded": true
}
```

### 3. Withdrawal Processing
```
Frontend → investment-manager-svc → withdraw-svc → ledger-writer
```

**Request:**
```json
POST /api/v1/withdraw
{
  "accountid": "1234567890",
  "amount": 500.00
}
```

**Ledger Transaction:**
```json
{
  "fromAccountNum": "9999999999",      // Bank's investment account
  "toAccountNum": "1234567890",        // User's account
  "fromRoutingNum": "123456789",
  "toRoutingNum": "123456789",
  "amount": 50000,                     // $500.00 in cents
  "uuid": "unique-transaction-id"
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Withdrawal processed and recorded successfully",
  "account_id": "1234567890",
  "amount": 500.00,
  "ledger_recorded": true
}
```

## Service Dependencies

### Portfolio Reader Service
- **Purpose**: Retrieves portfolio data and transaction history
- **Endpoint**: `http://portfolio-reader-svc:8080`
- **Environment Variable**: `PORTFOLIO_READER_URI`

### Investment Service
- **Purpose**: Processes investment requests
- **Endpoint**: `http://invest-svc:8080`
- **Environment Variable**: `INVEST_SVC_URI`

### Withdrawal Service
- **Purpose**: Processes withdrawal requests
- **Endpoint**: `http://withdraw-svc:8080`
- **Environment Variable**: `WITHDRAW_SVC_URI`

### Ledger Writer Service
- **Purpose**: Records financial transactions in ledger-db
- **Endpoint**: `http://ledgerwriter:8080`
- **Environment Variable**: `LEDGER_WRITER_URI`
- **Authentication**: Requires JWT Bearer token
- **Transaction Endpoint**: `POST /transactions`
- **Health Endpoint**: `GET /ready`

## Environment Variables
- `PORT`: Service port (default: 8080)
- `PORTFOLIO_READER_URI`: Portfolio reader service URL
- `INVEST_SVC_URI`: Investment service URL
- `WITHDRAW_SVC_URI`: Withdrawal service URL
- `LEDGER_WRITER_URI`: Ledger writer service URL
- `LOCAL_ROUTING_NUM`: Bank routing number
- `INVESTMENT_BANK_ACCOUNT`: Bank's dedicated investment account (default: 9999999999)
- `JWT_SECRET_KEY`: JWT secret key for token generation (from Kubernetes secret)
- `JWT_ALGORITHM`: JWT algorithm (default: HS256)
- `JWT_EXPIRATION_HOURS`: JWT token expiration in hours (default: 24)
- `REQUEST_TIMEOUT`: Request timeout in seconds (default: 30)

## Investment Bank Account

The service uses a dedicated bank account for all investment operations:

- **Account Number**: `9999999999` (configurable via `INVESTMENT_BANK_ACCOUNT`)
- **Purpose**: Centralized account for all investment transactions
- **Investment Flow**: User Account → Investment Bank Account
- **Withdrawal Flow**: Investment Bank Account → User Account

This design ensures:
- **Clear Transaction Tracking**: All investment money flows through a single account
- **Audit Trail**: Easy to track total investment amounts and activity
- **Risk Management**: Centralized control over investment funds
- **Compliance**: Simplified reporting and regulatory compliance

## Error Handling
- **Service Unavailable**: Returns 503 when dependent services are down
- **Invalid Data**: Returns 400 for malformed requests
- **Investment/Withdrawal Failures**: Returns 400 with error details
- **Partial Success**: Returns 200 with warning when ledger recording fails

## Ledger Writer Integration

### Transaction Format
The ledgerwriter service expects transactions in this format:
```json
{
  "fromAccountNum": "1234567890",
  "toAccountNum": "9999999999", 
  "fromRoutingNum": "123456789",
  "toRoutingNum": "123456789",
  "amount": 100000,
  "uuid": "unique-transaction-id"
}
```

### Authentication Requirements
- **JWT Token Required**: All `/transactions` requests need `Authorization: Bearer <token>` header
- **Token Forwarding**: Uses JWT token from incoming frontend request
- **Account Validation**: JWT must contain account number that matches transaction
- **Duplicate Prevention**: UUID field prevents duplicate transaction submissions

### JWT Token Flow
1. **Frontend** → **investment-manager-svc**: Sends JWT token in `Authorization: Bearer <token>` header
2. **investment-manager-svc** → **ledgerwriter**: Forwards the same JWT token to ledgerwriter
3. **ledgerwriter**: Validates JWT token and processes transaction

### Current Implementation Status
- **Format**: ✅ Correct JSON structure implemented
- **Authentication**: ✅ JWT token forwarding implemented
- **UUID Generation**: ✅ Unique transaction IDs generated
- **Amount Conversion**: ✅ Dollars converted to cents correctly
- **Token Extraction**: ✅ Extracts JWT from incoming request headers

## Integration Patterns

### Frontend Integration
The frontend calls investment-manager-svc for all portfolio operations:
```python
# Get portfolio data
response = requests.get(f'{INVESTMENT_MANAGER_URI}/api/v1/portfolio/{account_id}')

# Process investment
response = requests.post(f'{INVESTMENT_MANAGER_URI}/api/v1/invest', json={
    'accountid': account_id,
    'amount': amount
})

# Process withdrawal
response = requests.post(f'{INVESTMENT_MANAGER_URI}/api/v1/withdraw', json={
    'accountid': account_id,
    'amount': amount
})
```

### Service-to-Service Communication
The service orchestrates calls to multiple backend services:
1. **Portfolio Data**: Calls portfolio-reader-svc
2. **Investment Processing**: Calls invest-svc, then ledger-writer
3. **Withdrawal Processing**: Calls withdraw-svc, then ledger-writer

## Monitoring and Observability
- **Health Checks**: `/health` and `/ready` endpoints
- **Dependency Status**: `/api/v1/status` shows all service dependencies
- **Logging**: Comprehensive logging for all operations
- **Metrics**: Request/response tracking and error monitoring

## Deployment
- **Kubernetes**: Deploy using `kubectl apply -f kubernetes-manifests/investment-manager-svc.yaml`
- **Skaffold**: Use `skaffold dev --module investment-manager-svc`
- **Docker**: Build with `docker build -t investment-manager-svc .`

## Security
- **No Direct Database Access**: Acts as API gateway only
- **Service Authentication**: Relies on internal service mesh
- **Input Validation**: Validates all incoming requests
- **Error Sanitization**: Prevents sensitive data leakage in errors

## Performance Considerations
- **Connection Pooling**: Uses requests library with connection reuse
- **Timeout Handling**: Configurable timeouts for all external calls
- **Circuit Breaker Pattern**: Graceful degradation when services are unavailable
- **Resource Limits**: CPU and memory limits configured in Kubernetes

## Testing
- **Unit Tests**: Test individual service integration logic
- **Integration Tests**: Test end-to-end workflows
- **Load Tests**: Test under high concurrent load
- **Chaos Tests**: Test resilience to service failures

## Troubleshooting
- **Check Dependencies**: Use `/api/v1/status` to verify service health
- **Review Logs**: Check application logs for error details
- **Verify Configuration**: Ensure all environment variables are set
- **Test Connectivity**: Verify network connectivity to dependent services